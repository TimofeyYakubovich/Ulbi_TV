GraphQL & Apollo
GraphQL Это синтаксис как запрашивать данные и восновном используется клиентом для загрузки данных с сервера

срвнение HTTP сервера с GraphQL сервером

в слчае HTTP
на сервере определен набор каких то эндпоинтов каторые вызываются с помощью HTTP запросов GET/POST/PUT/DELETE
например мы хотим получить список пользователей отправляем GET запрос по URL Get/getUsers в бд хроняться эти пользователи
и у каждго пользователя есть большой набор параметров имя возраст серия номер паспорта и тд. бльшой набор 
users:	[
    {	
        id,
        username,
        age,
        friends,
        posts,
        ....
    }
]
но конкретно на той странице на клиенте весь этот набор данных не нужен но эндпоинт у нас 1 и мы всегда получаем только эти данные
хотя нам от пользователя надо только ия и фамилия например

GraphQL это проблему и решает мы отповляем конкретный запрос и говорим GraphQL серверу отдай нам только имя и фамилию 
query {
    дай мне имя и посты
}
сервер точно так же бращается к бд получает всех пользователей но возвращает на уже только конкретный данные каторые мы запросили
users:	[
    {	
        username,
        posts
    }
]

Основные понятия в GraphQL

все начинается с построения схемы в ней мы описываем типы мутации запросы
в этой схеме описан тип пользователя теперь GraphQL знает что есть такой объект пользвателя с такими полями 
схема это просто описание данных
type User {
    id: ID
    username: String
    age: Int
    posts: [Post]
}


query запросы
query описывает какие данные мы должны получить с сервера
в данном случае простой запрос м получам пользователей и от этих пльзователей берем только username и age
query {
    users {
        username
        age
    }
}


mutation мутации позволяют какие то данные добавить обновить перезаписать 
аналог POST/PUT запросов
в данном случае мы создаем пользователя с username Vasya и age 22 года
и говорим GraphQL серверу верни нам в ответ на эту мутацию его id, username
mutation createllser{
        addUser(username: "Vasya", age: 22) {
        id, username
    }
}


subscription подписки
с помощью подписак клиент слушает изминение в бд в режиме реального времени
под капотом подписки использую вебсокеты
subscription listenPostLikes {
    NstenPostLikes {
        title
        likes
    }
}



графический интерфейс 
в левой части пишем запросы в правой получаем ответы
так же есть документация каторая на данный момент пустая там будет описание всех запросов и мутаций

в графическом интерфейсе пишем запрос
query {
  getAllUsers {  в скобках указываем какие поля надо получить
    id, username, age 
  }
}
получаем 
{
  "data": {
    "getAllUsers": [
      {
        "id": "1",
        "username": "Vasya",
        "age": 25
      }
    ]
  }
}

пишем запрос
query {
  getAllUsers {
    username
  }
}
получаем
{
  "data": {
    "getAllUsers": [
      {
        "username": "Vasya"
      }
    ]
  }
}


добовляем пользователя в эмитированную будем
пишем запрос
mutation {
  createUser(input: { внутри инпут передаем обезательные поля
    username: "Petya",
    age: 25
  }) { возвращаеме значения
    id, username
  }
}
получаем
{
  "data": {
    "createUser": {
      "id": "1689018056729",
      "username": "Petya"
    }
  }
}

пишем запрос
mutation {
  createUser(input: {
    username: "Nastya",
    age: 35
  }) {
    id, username, age
  }
}
получаем
{
  "data": {
    "createUser": {
      "id": "1689018214604",
      "username": "Nastya",
      "age": 35
    }
  }
}


пишем запрос
query {
  getAllUsers {
    id, username, age
  }
}
получаем
{
  "data": {
    "getAllUsers": [
      {
        "id": "1",
        "username": "Vasya",
        "age": 25
      },
      {
        "id": "1689018197174",
        "username": "Nastya",
        "age": 35
      },
      {
        "id": "1689018214604",
        "username": "Nastya",
        "age": 35
      }
    ]
  }
}

пишем запрос
mutation {
  createUser(input: {
    username: "Nastya",
    age: 35
    posts: [
      {id: 1, title: "javascript", content: "top"}
    ]
  }) {
    id, username
  }
}
получаем
{
  "data": {
    "createUser": {
      "id": "1689018659060",
      "username": "Nastya"
    }
  }
}

пишем запрос
query {
  getAllUsers {
    username, posts {
      id, title, content
    }
  }
}
получаем
{
  "data": {
    "getAllUsers": [
      {
        "username": "Vasya",
        "posts": null
      },
      {
        "username": "Nastya",
        "posts": null
      },
      {
        "username": "Nastya",
        "posts": null
      },
      {
        "username": "Nastya",
        "posts": [
          {
            "id": "1",
            "title": "javascript",
            "content": "top"
          }
        ]
      }
    ]
  }
}