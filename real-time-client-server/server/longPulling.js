// npm i express cors ws nodemon
// ws модуль для работы с вебсокетами
const express = require('express')
const cors = require('cors')

// для того что бы мы могли по какому то событию возвращать ответ на клиент понадобится способ управления событиями в node.js
// для этого предназначени стандартный модуль ноды events
const events = require('events')
// создаем EventEmitter с помощью него омжно событие мжно регистрировать подписываться на них и вызывать 
const emitter = new events.EventEmitter()

const PORT = 5000;

const app = express()

app.use(cors())
app.use(express.json())

app.get('/get-messages', (req, res) => {
    // после того как пользователь отправил сообщение всех остальных участников чата надо осведомить что этот пользователь отправил сообщение
    // для этого и нужны события
    // с помощью функции once регестрируем событие newMessage 2 аргументом передаем колбек каторый единственным праметром это сообщение принимает
    emitter.once('newMessage', (message) => {
        // так как используем функцию once это событие отработает единажды
        // внутри колбека в событии просто возврощаем ответ на клиент
        // тоесть всем пользователям у каторых висит сейчас подключение возвращаем это сообщение
        res.json(message)
    })
})

app.post('/new-messages', (req, res) => {
    const message = req.body;  // достаем сообщение из тела запроса
    // что бы в колбек в emitter.once передать сообщение с помощью функции emit это событие по тому же названию вызываем 
    // и 2 аргументом передае то сообщение каторое нужно
    emitter.emit('newMessage', message)
    res.status(200)
})

app.listen(PORT, () => console.log(`server started on port ${PORT}`))


// пользователь отправляет гет запрос но мы не возвращаем ему ответ мы подписываемся на событие emitter.once('newMessage' и ждем 
// затем когда какой то другой участник чата отправил собщение мы это событие вызыаем emitter.emit('newMessage', message) после 
// чего всем участникам чата возвращается ответ с этим сообщением