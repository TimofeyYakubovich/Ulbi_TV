// сортировка алгоритмом выбора
// есть массив неупорядочных элиментов в цикле находим минимальный и меняем его местами с 1 элиментом
// затем опять пробегаеся по массиву находим минимальное значение и меняем его со вторым элиментом и тд.
const arr = [12,3,2,5,6,8,1,9,4,2,1,2,9,6,4,1,7,-1,-5, 23,6,2,35,6,3,32] // [0,1,1,2,3.......]
let count = 0

function selectionSort(array) {
    for (let i = 0; i < array.length; i++) { // кыклом пробегаемсяпо всему массиву от 0
        let indexMin = i  // индекс минималного числа в массиве поумолчанию индекс внешнего цикла
        // делаем еще один цикл среди элиментов из вложенного цикла будет находится минимальный и этот элимент будет заменять элимент из внешнего 
        // цикла вложенный начинается не 0 а let j = i+1
        for (let j = i+1; j < array.length; j++) {
            if (array[j] < array[indexMin]) { // если текущий элимент итерации меньше чем элимент с минимальным индексом
                indexMin = j                  // то этот минимальный индекс заменяем на текущий индекс итерации
            }                                 // тоесть за полный проход по массиву найдется индекс indexMin = j минимально числа в массиве
            count += 1
        }
        // далее надо заменить первый элимент массива с минимальным
        let tmp = array[i]          // временная переменная в нее ложем значение из 1 элимента массива что бы оно не затерялось
        array[i] = array[indexMin]  // на место 1 элимента массива ложим минимальный
        array[indexMin] = tmp       // на место минималього элимента ложим ложем значение из 1 элимента массива
    }
    return array
}


console.log(selectionSort(arr))
console.log('count = ', count)

// количество итераций 325 длина массива 26 и получается сложность алгоритма 0(n*n) 
// но 325 не равняется 26 в квадрате
// получается внешний цикл проходит полностью по всему массиву а во внутренним мы каждый раз на 1 сдвгаемся
// получается перед n^2 стоит коэфициент 1/2 но эти коэфициенты в оценке сложности алгоритма никогда не учавствуют остается 0(n*n)