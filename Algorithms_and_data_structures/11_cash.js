// алгоритм кеширования данных во избежание повторных вычислений какой либо функции

// создади функию каторая будет кешировать внетри себя результат выполнения какой то другой функции
function cashFunction(fn) {
    const cash = {} // объект каторый будет хронить в себе по ключу результаты кеширования
    // ключем в данном случае будет параметр n каторый мы передаем в функию
    return function (n) { // из этой функции возвращаем новую функцию тоесть своего рода замыкание каторая параметром принимает тот самый n
        if (cash[n]) {    // если по ключу n в объекте cash находится какое то значение то его и возвращаем
            console.log('Взято из кеша', cash[n])
            return cash[n]
        }
        // если по ключу n в объекте cash ничего нет то мы должны выполнить функию каторую передали параметром
        // и поместить результат выполнения этой функции в переменную result но в нашем сучае будем передавать параметром функцию факториала
        let result = fn(n)
        console.log('Посчитала функция', result)
        // затем в в объекте cash по ключу n добвляем результат выполнения этой функции
        cash[n] = result
        return result;
    };
}

// для примера реализуем функцию факториала итеративным способом
function factorial(n) {
    let result = 1
    while (n != 1) {
        // на каждой итерации result умножаем на число каторое принмае параметром
        // и от этого чисоа отнимаем 1 до тех пор пока цикл не остановится
        result *= n
        n -= 1
    }
    return result
}

// console.log(factorial(5))

// создадим функцию каторая будет кешировать факториал
// для этого создаем переменную cashFactorial вызываем ФУНКЦИЮ cashFunction и в нее передаем factorial
// cashFunction возвращает нам новую функцию
const cashFactorial = cashFunction(factorial)

cashFactorial(5)
cashFactorial(4)
cashFactorial(3)
cashFactorial(4)
cashFactorial(5)
cashFactorial(1)
