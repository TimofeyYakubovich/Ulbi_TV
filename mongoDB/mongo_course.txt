NoSQL базы данных на примере MongoDB
MongoDB документоориентированная система управления базами данных
для хранения данных используется JSON подобный формат

mongо не требует описания схем таблиц как в реляционых базах данных
данные хроняться ввиде колекций и документов
БД состоит из набора колекций каждая колекция содержит какие то документы
документы хроняться в JSON подобном формате
у документов в одной колекции не обезательно должна быть строгая структура

в терминале MONGO SH

show databases что бы посмотреть список имеющихся баз данных или show dbs
admin   40.00 KiB
config  12.00 KiB
local   40.00 KiB
_______________________________________________________________________
что бы использовать какую то базу данных и как то изменять колекции используется ключевое слово use
если бд с таким названием не существует она будет создана

use mongo
'switched to db mongo'
_______________________________________________________________________
создадим первую колекцию 
обращаться к бд можно через ключевое слово db
db.createCollection("users") createCollection создает колекцию указываем название колекции "users"
{ ok: 1 }
_______________________________________________________________________
show collections посмотреть колекции через консоль
users
_______________________________________________________________________
db.dropDatabase() функция каторая удаляет бд
{ ok: 1, dropped: 'mongo' }
_______________________________________________________________________
добавить документ в колекцию передае поля каторые будут у эого документа
db.users.insert({ 
    name: "ulbiTV",
    age: 25
})
предупреждение лучше использовать insertOne, insertMany
_______________________________________________________________________
запрос на получение пользователей
db.users.find()
{
  _id: ObjectId("643862f9863741c2e1947745")
}
{
  _id: ObjectId("64386ca9863741c2e1947746"),
  name: 'ulbiTV',
  age: 25
}
_______________________________________________________________________
добавить несколько документов передаем массив с объектами документами
db.users.insertMany([
    {name: 'vasya', age: 28},
    {name: 'petya', age: 23},
    {name: 'dima', age: 35},
    {name: 'anton', age: 24},
    {name: 'ulbiTV', age: 42}
])

{ к 5 сущностям были добавлены id
  acknowledged: true,
  insertedIds: {
    '0': ObjectId("64386ea1863741c2e1947747"),
    '1': ObjectId("64386ea1863741c2e1947748"),
    '2': ObjectId("64386ea1863741c2e1947749"),
    '3': ObjectId("64386ea1863741c2e194774a"),
    '4': ObjectId("64386ea1863741c2e194774b")
  }
}
_______________________________________________________________________

как получать данные по критерию 
в find передаем объект с критерием
db.users.find({age: 25})

{
  _id: ObjectId("64386ca9863741c2e1947746"),
  name: 'ulbiTV',
  age: 25
}

можно указывать несколько критериев
db.users.find({age: 25, name: 'asd'}) по несуществующему имени ничего не находим

db.users.find({age: 25, name: 'ulbiTV'})

{
  _id: ObjectId("64386ca9863741c2e1947746"),
  name: 'ulbiTV',
  age: 25
}

_______________________________________________________________________

можно задать условие или
например найти человека или с возрастом 35 или с именем ulbiTV
поиск будет по 2 критериям сразу

db.users.find({$or:[{name: 'ulbiTV'}, {age: 35}]})

{
  _id: ObjectId("64386ca9863741c2e1947746"),
  name: 'ulbiTV',
  age: 25
}
{
  _id: ObjectId("64386ea1863741c2e1947749"),
  name: 'dima',
  age: 35
}
{
  _id: ObjectId("64386ea1863741c2e194774b"),
  name: 'ulbiTV',
  age: 42
}
_______________________________________________________________________

когда надо найти пользователя не равного какому то числу а больше или меньше

найти пользователя меньше 28 лет

db.users.find({age:{$lt:28}})

{
  _id: ObjectId("64386ca9863741c2e1947746"),
  name: 'ulbiTV',
  age: 25
}
{
  _id: ObjectId("64386ea1863741c2e1947748"),
  name: 'petya',
  age: 23
}
{
  _id: ObjectId("64386ea1863741c2e194774a"),
  name: 'anton',
  age: 24
}

найти пользователя меньше либо равно 28 лет

db.users.find({age:{$lte:28}})

{
  _id: ObjectId("64386ca9863741c2e1947746"),
  name: 'ulbiTV',
  age: 25
}
{
  _id: ObjectId("64386ea1863741c2e1947747"),
  name: 'vasya',
  age: 28
}
{
  _id: ObjectId("64386ea1863741c2e1947748"),
  name: 'petya',
  age: 23
}
{
  _id: ObjectId("64386ea1863741c2e194774a"),
  name: 'anton',
  age: 24
}

найти пользователя больше 28 лет

db.users.find({age:{$gt:28}})

{
  _id: ObjectId("64386ea1863741c2e1947749"),
  name: 'dima',
  age: 35
}
{
  _id: ObjectId("64386ea1863741c2e194774b"),
  name: 'ulbiTV',
  age: 42
}

найти пользователя больше либо равно 28 лет

db.users.find({age:{$gte:28}})

найти пользователей не равных заданым

db.users.find({age:{$ne:28}})
_______________________________________________________________________

можно при поиске документов в колекции их отсортировать
после find() вызываем sort() ей передаем критерий и число 1 или -1
1 сортировка в пряом порядке -1 в обратном порядке

db.users.find().sort({age:1})
db.users.find().sort({age:-1})
_______________________________________________________________________

количество получаемых записей можно ограничеть
после find() вызываем limit() можно комбинировать вместе с sort()

db.users.find().limit(4)
db.users.find().limit(2)
_______________________________________________________________________

mongo для каждого пользователя создает уникальный id 
этот id является типа ObjectId
что бы искать пользователя по id 

db.users.findOne({_id:ObjectId("64386ea1863741c2e194774b")})

{
  _id: ObjectId("64386ea1863741c2e194774b"),
  name: 'ulbiTV',
  age: 42
}
_______________________________________________________________________

для поиска 1 человека предпочтителнее использовать findOne

db.users.findOne({age: 23})

{
  _id: ObjectId("64386ea1863741c2e1947748"),
  name: 'petya',
  age: 23
}

так же ииспользуя функцию find можно срзу его удлить findOneAndDelete обновить findOneAndUpdate
заменять findOneAndReplace

_______________________________________________________________________

обновлять существующие записи в колекции функция update()
1 параметром принимает объект каторый надо найти и заменить
можно указать несколько критериев можной, все критерии каорые попадут под тот каторый указали
в 1 параметре все будут заменены

2 параметром передаем объект у каорого указываем поле $set и в него передаем критерии каторые
надо заменить

db.users.update(
    {name: "ulbiTV"},
    {
        $set: {
            name: "Ilon Mask",
            age: 45
        }
    }
)
'DeprecationWarning: Collection.update() is deprecated. Use updateOne, updateMany, or bulkWrite.'
предупреждение лучше использовать updateOne, updateMany
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1, была изменена 1 запись
  upsertedCount: 0
}

функция updateMany 1 параметр указываем пустым что бы обновить все записи
2 параметр указываем поле $rename что бы изменить название поля пользователя
заменим name на fillname

db.users.updateMany(
    {},
    {
        $rename: {
            name: "fillname"
        }
    }
)

{
  acknowledged: true,
  insertedId: null,
  matchedCount: 7,
  modifiedCount: 6, было изменено 6 записей
  upsertedCount: 0
}
_______________________________________________________________________

что бы удалить пользователя deleteOne()

db.users.deleteOne({age:24}) удаляем пользователя с возрастом 24
_______________________________________________________________________

можно в одном запросе делать сразу несколь операций функция bulkWrite
параметами принимает объекты
например вставить посльзователя удалить и обновить
1 объект пользователя добавить insertOne в нее поле document каторый будет добовляться в бд
2 объект пользователя удалить deleteOne в нее поле filter фильтер по каторому будем пользователя
удалять пользователя c именем "petya"

db.users.bulkWrite([
    {
        insertOne: {
            document: {name: "nastya", age: 18}
        }
    },
    {
        deleteOne: {
            filter: {fillname: "petya"}
        }
    }
])

{
  acknowledged: true,
  insertedCount: 1,
  insertedIds: {
    '0': ObjectId("643a7bab00afaeb2df9930fb")
  },
  matchedCount: 0,
  modifiedCount: 0,
  deletedCount: 1,
  upsertedCount: 0,
  upsertedIds: {}
}
_______________________________________________________________________