const Emitter = require('events'); // модуль events это класс позволяет создовать события подписываться на них генерировать события
const dotenv = require('dotenv');
dotenv.config()
const emitter = new Emitter(); // создаем объект из класса Emitter

// с модулем events события работают аналогично как и с фронтендом методы по типу addEventListener removeEventListener 

const callback = (data, second, third) => {
    // каторый отработает когда событие сгенерируется колбек может принимать неагрониченое количество аргументов
    console.log('Вы прислали сообщение ' + data)
    console.log('Второй аргумент ' + second)
}

// emitter.on('message', (data, second, third) => { // создаем пользовательское событие с помощью функции on 1 аргумент событие 'message' 
//     // 2 аргумент колбек каторый отработает когда событие сгенерируется колбек может принимать неагрониченое количество аргументов
//     console.log('Вы прислали сообщение ' + data)
//     console.log('Второй аргумент ' + second)
// }) 

emitter.once('message', callback) // когда событие надо сгенерировать 1 раз для этого предназначена функция once

// сгенерируем событие 'message'

// const MESSAGE = process.env.message || ''; // MESSAGE будем плучаь из перменной окружения message

// if (MESSAGE) { // если MESSAGE не пустое будем генерировать событие 
//     emitter.emit('message', MESSAGE, 123) // для генерации события используется функция emit 1 аргументом передаем назавние события каторое
//     // надо сгенерировать 'message' 2 аргумент MESSAGE это data 3 аргумент 123 это second
// } else {  // если MESSAGE пустое
//     emitter.emit('message', 'Вы не указали сообщение')
// }

// запускаем код получаем Вы прислали сообщение Вы не указали сообщение Второй аргумент undefined
// запускаем код указав переенную окружения MESSAGE="1 2 3 4 5 6 7 hhhtjt" node .\lessons\events.js
// получаем Вы прислали сообщение 1 2 3 4 5 6 7 hhhtjt Второй аргумент 123

// это удобная концепция используется при создании HTTP серверов, при обмене сообщениями, для генерации событий на определенные действия
// вебсокетах, кластаризации практически любой модуль node.js использует в себе концепцию событийноориентированной модели

// когда с помощью on подписываемся на событие с помощью emit можно генерировать его бесконечное количество раз

// но часто возникают ситуации когда событие надо сгенерировать 1 раз для этого предназначена функция once
// несколь раз прописали emitter.emit('message') но он сработал только 1 раз
emitter.emit('message')
emitter.emit('message')
emitter.emit('message')
emitter.emit('message')
emitter.emit('message')

emitter.removeAllListeners(); // удаляет все слушатели
emitter.removeListener('message', callback) // удаляет конкретный слушатель это необходимо потому что на одно и то же название события 'message'
// можно вешать несколько разных колбеков